<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on less on sec</title><link>https://lessonsec.com/posts/</link><description>Recent content in Posts on less on sec</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Jul 2021 16:45:40 +0200</lastBuildDate><atom:link href="https://lessonsec.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysis of a Remote Control</title><link>https://lessonsec.com/posts/analysis-of-a-remote-control/</link><pubDate>Thu, 15 Jul 2021 16:45:40 +0200</pubDate><guid>https://lessonsec.com/posts/analysis-of-a-remote-control/</guid><description>A couple of days ago I found some old remote controls around the house and decided it was time to take out my old RTL-SDR and put it to good use. In this article I will describe step-by-step my experience with studying, reversing and understanding these devices.
In particular the analysis will comprehend:
Analysis of the board Analysis of the behavior Analysis of the signal This will allow to have a complete overview of the remotes.</description><content type="html"><![CDATA[<p>A couple of days ago I found some old remote controls around the house and decided it was time to take out my old <strong>RTL-SDR</strong> and put it to good use.
In this article I will describe step-by-step my experience with <em>studying</em>, <em>reversing</em> and <em>understanding</em> these devices.</p>
<p>In particular the analysis will comprehend:</p>
<ul>
<li>Analysis of the <strong>board</strong></li>
<li>Analysis of the <strong>behavior</strong></li>
<li>Analysis of the <strong>signal</strong></li>
</ul>
<p>This will allow to have a complete overview of the remotes.</p>
<p><img src="/images/rc_analysis/complete.jpeg#center" alt="remote"></p>
<h2 id="board-analysis">Board analysis</h2>
<p>The first thing I did was to operate the remote: of course whenever the yellow button was pressed, the led on its side would light up signaling that everything was working fine. The device could use different communication methods, but since there is no visible IR LED, it is possible to assume that the device works via radio signals.</p>
<p>The very next step was to open up the remote and visually inspect the board.</p>
<p>Inside the plastic casing I found this simple PCB.</p>
<p><img src="/images/rc_analysis/pcb.png#center" alt="RC pcb board"></p>
<p>At first glance it&rsquo;s possible to notice that there&rsquo;s an <em>antenna</em>, <em>a crystal oscillator</em>, a <em>trimmer</em> an <em>integrated circuit</em> and of course led, button and battery.
As expected, there&rsquo;s everything needed for a radio transmitter to work.</p>
<p><img src="/images/rc_analysis/clock.jpeg#center" alt="crystal oscillator"></p>
<p>Looking at the components further it&rsquo;s possible to gather insights about how the device works.
In particular the oscillator gives away that the device probably operates at <em>30.875MHz</em> - this isn&rsquo;t what I was expecting.</p>
<p>In my country, <strong>Short Range Devices</strong> should work in the ranges:</p>
<ul>
<li>27,5000 – 28,0000 MHz</li>
<li>29,7000 – 30,0050 MHz</li>
</ul>
<p>Or, for general purpose applications they can work  in the ranges:</p>
<ul>
<li>433,000 – 435,0000 MHz (devices without a specific use)</li>
<li>862,0000 – 876,0000 MHz (devices without a specific use, wireless audio, alarm systems, social alarms, radio microphones, and RFID devices)</li>
</ul>
<p>Radio transmitters are not forced to adopt the crystal oscillator frequency as working frequency, in fact it&rsquo;s not uncommon that they use a multiple of such frequency instead. Said that, at this point it&rsquo;s only a guess, but even if it&rsquo;s not in the expected ranges, it&rsquo;s possible that the working frequency of the remote would be around 30.875MHz.</p>
<p><img src="/images/rc_analysis/dip_switch.jpeg#center" alt="DIP switch"></p>
<p>We can also see that there&rsquo;s a 10-position DIP switch.</p>
<p>The first pin (1) of the DIP switch has written &ldquo;ON&rdquo; on top of it, meaning that the switch closes the circuit when the lever is in the &ldquo;high&rdquo; position.
This component suggests us that the remote sends at least 10 bits of data. I say at least, because it&rsquo;s possible that the device sends preamble/ending bits and/or checksum or parity bits.</p>
<p>Also, given the position of the switches, it&rsquo;s possible to assume that the code sent by the remote would either be <code>0001000110</code> or <code>1110111001</code>.</p>
<p><img src="/images/rc_analysis/unknown_ic.jpeg#center" alt="ITF CIE9101"></p>
<p>On the back of the PCB there&rsquo;s the ITF CIE9101 integrated circuit. Sadly I wasn&rsquo;t able to find any datasheets or information about this component (hit me up if you know something about it!).</p>
<p>Inspecting the PCB it&rsquo;s possible to see that this device is connected to the DIP switch, to the oscillator and to the antenna. We can make an educated guess and say that this IC is probably responsible for the radio transmission (in future it would be worth reverse engineering this IC to better understand how this device work).</p>
<h2 id="behavior-analysis">Behavior analysis</h2>
<p>To validate the hypothesis of the device being a radio transmitter, it&rsquo;s fundamental to try to intercept and visualize the communication.</p>
<p>The goal now is to find the transmitted signal. There is a limited set of possible frequency ranges, but it&rsquo;s not always easy to blindly spot the signal you&rsquo;re looking for, especially in areas in which similar devices are widely employed (think of remote car keys, AC remotes, radio weather stations and so on).</p>
<p>To figure out the frequency and to work with the raw radio signal I used a Silver dongle <a href="https://www.rtl-sdr.com/about-rtl-sdr/">RTL-SDR</a> and <a href="https://gqrx.dk/">gqrx</a>.</p>
<p><img src="/images/rc_analysis/rtl_antenna.jpeg#center" alt="rtl-sdr and antenna"></p>
<p>Once <em>gqrx</em> was open, it was necessary to spot the correct frequency. Since there is a 30.875MHz crystal oscillator in the remote, that was the first frequency I checked. And luckily the signal was right there. Well, for this remote in particular it was at 30.889MHz, but at least we got the working frequency.</p>
<p>NOTE: I could work with 3 of these remotes, and each one was using a slightly different frequency, that&rsquo;s why it was possible to find the signal at 30.889MHz and not exactly at 30.875MHz. This can depend on a number of factors and it&rsquo;s completely normal.</p>
<p><img src="/images/rc_analysis/gqrx_signal.gif#center" alt="radio signal"></p>
<p>Now it&rsquo;s time to analyze the signal.</p>
<h2 id="signal-analysis">Signal analysis</h2>
<p>What I did at this point was to record the signal in <em>gqrx</em> to analyze it.
Opening the signal in audacity shows the recorded waveform.</p>
<p><img src="/images/rc_analysis/signal.jpeg#center" alt="waveform"></p>
<p>We can see noise at the beginning and at the end of the recording, while the center part represent the communication.</p>
<p>It&rsquo;s possible to notice immediately that there are numerous spikes, this is due to the fact that I kept the button pressed for a few seconds while recording.
Visually it&rsquo;s possible to say that the spikes are identical, so our scope is limited to understanding what one of these spikes represent.</p>
<p>Now we need to zoom in on one spike to try and decode the actual digital data.</p>
<p><img src="/images/rc_analysis/signal_zoom.jpeg#center" alt="zoomed waveform"></p>
<p>Of course it&rsquo;s a digital communication and It&rsquo;s now clear that we are dealing with <a href="https://en.wikipedia.org/wiki/Pulse-width_modulation">Pulse Width Modulation (PWM)</a>.
If we look closely at the signal, we can see that there are &ldquo;short&rdquo; and &ldquo;long&rdquo; pulses. Those represent either 1s or 0s depending on the protocol shared by the remote and the receiver.</p>
<p>Counting the bits reveals that that&rsquo;s more than a simple 10 bit communication. In fact, we are dealing with 14 bits.
If we compare the signal to the position of the switches in the remote, we see that the pattern matches, with the exception of the last 4 bits. These bits (either 0000 or 1111) are trailing bits, needed to signal the end of the communication.</p>
<p>To prove that the signal actually corresponds to the one encoded by the switch + 4 trailing bits, I&rsquo;m using <code>rtl_433</code> to read and decode the signal.
So we run <code>rtl_433 -f 30888000 -A</code> and we get this output:</p>
<pre><code>Attempting demodulation... short_width: 748, long_width: 1516, reset_limit: 5420, sync_width: 0
Use a flex decoder with -X 'n=name,m=OOK_PWM,s=748,l=1516,r=5420,g=1556,t=307,y=0'
pulse_demod_pwm(): Analyzer Device
bitbuffer:: Number of rows: 6 
[00] {14} ee 40     : 11101110 010000
[01] {14} ee 40     : 11101110 010000
[02] {14} ee 40     : 11101110 010000
[03] {14} ee 40     : 11101110 010000
[04] {14} ee 40     : 11101110 010000
</code></pre><p>And we confirm that the signal uses a PWM modulation and is in fact <code>1110111001</code> followed by <code>0000</code>.</p>
<p>To exclude the possibility that the last 4 bits are parity bits, we need to try other configurations in the remote and analyze the signal.
I proceeded to do so and one-by-one I lifted the switches corresponding to the 0s in the signal to see what would change in the transmitted bits.</p>
<p>Changing bit 9 from 0 to 1 produced the following signal:</p>
<pre><code>[00] {14} ee c0     : 11101110 110000
[01] {14} ee c0     : 11101110 110000
[02] {14} ee c0     : 11101110 110000
[03] {14} ee c0     : 11101110 110000
[04] {14} ee c0     : 11101110 110000
[05] {14} ee c0     : 11101110 110000
</code></pre><p>Similarly, changing bit 8, produced this signal:</p>
<pre><code>[00] {14} ef c0     : 11101111 110000
[01] {14} ef c0     : 11101111 110000
[02] {14} ef c0     : 11101111 110000
[03] {14} ef c0     : 11101111 110000
[04] {14} ef c0     : 11101111 110000
[05] {14} ef c0     : 11101111 110000
</code></pre><p>Finally I changed bit 4 and I decoded signal was:</p>
<pre><code>[00] {14} ff c0     : 11111111 110000
[01] {14} ff c0     : 11111111 110000
[02] {14} ff c0     : 11111111 110000
[03] {14} ff c0     : 11111111 110000
[04] {14} ff c0     : 11111111 110000
[05] {14} ff c0     : 11111111 110000
</code></pre><p>As I suspected the last 4 bits don&rsquo;t change even if the signal changes. This means that they are simple trailing bits and not parity bits or a form of checksum.</p>
<h2 id="conclusions">Conclusions</h2>
<p>After the analysis, everything about how this board operates is known.
Since this device was pretty old I wasn&rsquo;t expecting behaviors any more complex that the ones we observed.</p>
<p>I was left with a deeper understanding on radio communications, in particular of the concept of modulations.
This was in fact the first time I was confronted with the PWM modulation in a real life scenario.
Decoding these signals both visually and using specialized software allowed me to learn new tools I&rsquo;ll be using for future experiments.</p>
]]></content></item><item><title>Cloning RFID tags for fun and profit</title><link>https://lessonsec.com/posts/cloning-rfid-tags-for-fun-and-profit/</link><pubDate>Tue, 20 Apr 2021 16:27:00 +0200</pubDate><guid>https://lessonsec.com/posts/cloning-rfid-tags-for-fun-and-profit/</guid><description>RFID tags are a technology commonly used but not limited to industrial purposes. These systems are in fact used every day as public transport passes, as security token in access control systems or as a digital &amp;ldquo;bar code&amp;rdquo; in shops. Given the diffusion these tags have, it&amp;rsquo;s important to understand how they work and the security implication of their use.
Radio-frequency identification (RFID) uses electromagnetic fields to automatically identify and track tags attached to objects.</description><content type="html"><![CDATA[<p>RFID tags are a technology commonly used but not limited to industrial purposes. These systems are in fact used every day as public transport passes, as security token in access control systems or as a digital &ldquo;bar code&rdquo; in shops.
Given the diffusion these tags have, it&rsquo;s important to understand how they work and the security implication of their use.</p>
<blockquote>
<p>Radio-frequency identification (RFID) uses electromagnetic fields to automatically identify and track tags attached to objects.<br>
An RFID system consists of a tiny radio transponder, a radio receiver and transmitter. When triggered by an electromagnetic interrogation pulse from a nearby RFID reader device,  the tag transmits digital data, back to the reader. - <a href="https://en.wikipedia.org/wiki/Radio-frequency_identification">Wikipedia</a></p>
</blockquote>
<p><img src="/images/rfid/main.jpg" alt="rfid tools"></p>
<h3 id="whats-rfid">What&rsquo;s RFID?</h3>
<p>RFID is a set of standards and technologies because it includes multiple frequency ranges such as:</p>
<ul>
<li>LF: 120–150 kHz</li>
<li>HF: 13.56 MHz</li>
<li>UHF: 433 MHz</li>
<li>UHF: 865–868 MHz (Europe) 902–928 MHz (North America)</li>
<li>microwave: 2450–5800 MHz</li>
<li>microwave: 3.1–10 GHz</li>
</ul>
<p>In practice, only tags operating in the LF range are commonly called RFID tags while tags operating in the HF range are called NFC tags.<br>
The rest are radio technologies not limited to the near field use (i.e. bluetooth).</p>
<p>There&rsquo;s a big difference between RFID and NFC tags and it hides in the specifications. They operate on different frequencies, use different protocols, offer different features and have different uses. Some RFID devices can be compatible with NFC readers, but that doesn&rsquo;t mean that they strictly follow the NFC specs. Further considerations on the difference between these technologies are out of the scope of this article, but it&rsquo;s important not to confuse the two.</p>
<p>LF tags operate in the 120–150 kHz range, but the most commonly used frequencies are 125kHz for access control tags and 134kHz for uses like pet chips. Other frequencies can be used but the vast majority of tags use either 125kHz or 134kHz. Such low frequencies can limit the data transmission speed.</p>
<p>RFID LF tags can be passive. This means that the tag is powered and interrogated by the reader. Or active, meaning that the tag is powered with a battery and that it continuously broadcasts data.
While active tags are used, they often have specific purposes. This article will focus on RFID LF passive tags since it&rsquo;s the most common variant found in everyday life.</p>
<p>RFID LF tags have poor transmission speed but are incredibly cheap to produce. Due to this, they are so widely employed where speed is not fundamental.
The reading distance of LF tags is usually better compared to HF reading distance. In fact, LF is referred as a vicinity technology, while HF is generally called a proximity technology.</p>
<p>Industrial uses aside, one of the main uses of these tags is as access control tokens. It&rsquo;s common to see these tags in form of badges or key fobs, and these can be used to access homes, offices or critical infrastructures.</p>
<p>There are numerous models of RFID LF tags each with it&rsquo;s specific features and peculiarities, but the use as a security token is not ideal for one main reason: RFID LF tags can be an insecure option. (note that are exceptions: some tags can employ a password or crypto mode, one of the very few examples are <a href="https://www.nxp.com/products/rfid-nfc/hitag-lf:MC_42027">Hitag2</a> tags and these security measures <a href="https://www.cs.bham.ac.uk/~tpc/isecsem/talks/EZ.pdf">can still be circumvented</a>!)</p>
<p>In this article, we will see how it&rsquo;s possible to read, write and clone these tags and learn about possible implications due to misuse of this technology.</p>
<h3 id="how-to-work-with-rfid-tags">How to work with RFID tags</h3>
<p>To work with RFID tags, specialized hardware is necessary.</p>
<p>Different devices exist:</p>
<ul>
<li>
<p>Chinese cloners<br>
Simple devices that read from one tag and write on another.
Generally, these are hand-held, feature read and write buttons, and have a couple of status LEDs.
Some are more advanced than others and can feature a little screen.
Compatibility for frequencies and standards may vary, but these devices are usually good enough for simpler tasks.</p>
</li>
<li>
<p>RFID Chameleon<br>
Developed to be used in RFID security assessments.
Doesn&rsquo;t offer the most advanced features, but is designed to be used in the field, is battery powered and supports tag simulation and manipulation.
It is also programmable and you can use it with an app.</p>
<p>It&rsquo;s probably the best solution for a standalone use.<br>
More here: <a href="https://kasper-oswald.de/gb/chameleonmini/">https://kasper-oswald.de/gb/chameleonmini/</a></p>
</li>
<li>
<p>Proxmark3<br>
As the website puts it: Proxmark is an RFID swiss-army tool.
It represents the state of the art when it comes to RFID research.
It allows interacting with the tags both high and low level.
Different versions have different features, including bluetooth support, battery packs,
swappable antennas and so on.</p>
<p>It supports a standalone use, but it&rsquo;s more powerful when connected to a PC.
It&rsquo;s to be intended  as a research tool.<br>
More here: <a href="https://www.proxmark.com/">https://www.proxmark.com/</a></p>
</li>
<li>
<p>Generic boards<br>
Other boards exist. These are usually sold as an Arduino add on, but dongles featuring
the same integrated circuits are available.
These are not widely used outside the makers world, but many are compatible with
<a href="http://www.nfc-tools.org/index.php/Libnfc"><code>libnfc</code></a> and can be useful to perform simple to advanced operations.</p>
</li>
</ul>
<p>The only device that I have available is a Proxmark3 easy (cheap Chinese version) so this
article will focus on its use. The underlying concepts about RFID tags should translate to other devices.</p>
<h3 id="tags-that-emulate-other-tags">Tags that emulate other tags</h3>
<p>When it comes to working with RFID LF tags, there&rsquo;s one main player: the <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-9187-RFID-ATA5577C_Datasheet.pdf">t55xx</a> tag</p>
<p>They are a family of tags developed to emulate a wide range of regular tags.
This means that it&rsquo;s possible to clone most of the RFID tags around using one of these
without having to carry writable cards for each and every tag model.</p>
<p>This tag features 8 x 32 bit blocks in page 0 and 4 x 32 blocks in page 1.
Page 1 blocks are meant to be used for configuration purposes along with block 0 and 7 in page 0.
Blocks 1 to 6 in page 0 are dedicated to user data.</p>
<p><img src="/images/rfid/t55xx.png#center" alt="t55xx"></p>
<p>Of course, it&rsquo;s possible to work directly on the configuration blocks, and this is what allows the emulation
of other type of tags, but doing so carelessly can easily lead to a brick!</p>
<p><img src="/images/rfid/bricked.jpg#center" alt="bricked tag"></p>
<p>Original Atmel T5577 tags have a test mode and that can be helpful to recover soft-bricked cards.</p>
<h3 id="cloning-tags">Cloning tags</h3>
<p>Using the proxmark3 CLI, reading and writing devices is pretty straightforward.
First off you need to look for the device:</p>
<pre><code>[usb] pm3 --&gt; lf search

[=] NOTE: some demods output possible binary
[=] if it finds something that looks like a tag
[=] False Positives ARE possible
[=] 
[=] Checking for known tags...
[=] 
[+] EM 410x ID 1122334455
[+] EM410x ( RF/64 )
[=] -------- Possible de-scramble patterns ---------
[+] Unique TAG ID      : 8844CC22AA
[=] HoneyWell IdentKey
[+]     DEZ 8          : 03359829
[+]     DEZ 10         : 0573785173
[+]     DEZ 5.5        : 08755.17493
[+]     DEZ 3.5A       : 017.17493
[+]     DEZ 3.5B       : 034.17493
[+]     DEZ 3.5C       : 051.17493
[+]     DEZ 14/IK2     : 00073588229205
[+]     DEZ 15/IK3     : 000585269781162
[+]     DEZ 20/ZK      : 08080404121202021010
[=] 
[+] Other              : 17493_051_03359829
[+] Pattern Paxton     : 289899093 [0x11478255]
[+] Pattern 1          : 5931804 [0x5A831C]
[+] Pattern Sebury     : 17493 51 3359829  [0x4455 0x33 0x334455]
[=] ------------------------------------------------

[+] Valid EM410x ID found!
</code></pre><p>The proxmark found an EM410x tag! We can now try to read it:</p>
<pre><code>[usb] pm3 --&gt; lf em 410x reader
[+] EM 410x ID 1122334455
</code></pre><p>Let&rsquo;s try with another type of tag:</p>
<pre><code>[usb] pm3 --&gt; lf search

[=] NOTE: some demods output possible binary
[=] if it finds something that looks like a tag
[=] False Positives ARE possible
[=] 
[=] Checking for known tags...
[=] 
[+] [H10301] - HID H10301 26-bit;  FC: 118  CN: 1603    parity: valid
[=] raw: 000000000000002006ec0c86

[+] Valid HID Prox ID found!
</code></pre><p>It&rsquo;s an HID Prox tag, let&rsquo;s try and read its ID:</p>
<pre><code>[+] [H10301] - HID H10301 26-bit;  FC: 118  CN: 1603    parity: valid
[=] raw: 000000000000002006ec0c86
</code></pre><p>And just like that we got the devices ID. That ID is the authentication token!
If we can write this token on a t55xx tag, we can emulate the card and possibly gain access
to a restricted perimeter.</p>
<p>Let&rsquo;s see how it&rsquo;s done.<br>
First we need to get a t55xx tag and position it on the reader. When empty this device
can&rsquo;t be found using <code>lf search</code>, so we can make sure it&rsquo;s a t55xx tag using the detect command:</p>
<pre><code>[usb] pm3 --&gt; lf t55xx detect
[=]  Chip type......... T55x7
[=]  Modulation........ ASK
[=]  Bit rate.......... 2 - RF/32
[=]  Inverted.......... No
[=]  Offset............ 32
[=]  Seq. terminator... Yes
[=]  Block0............ 00088048 (auto detect)
[=]  Downlink mode..... default/fixed bit length
[=]  Password set...... No
</code></pre><p>The <code>lf t55 detect</code> command is also necessary before using this tag because it detects the configuration in use and helps avoiding problems running other <code>lf t55</code> commands.</p>
<p>Now we can see the content of the device:</p>
<pre><code>[usb] pm3 --&gt; lf t55xx dump
[+] Reading Page 0:
[+] blk | hex data | binary                           | ascii
[+] ----+----------+----------------------------------+-------
[+]  00 | 00088048 | 00000000000010001000000001001000 | ...H
[+]  01 | 00000000 | 00000000000000000000000000000000 | ....
[+]  02 | 00000000 | 00000000000000000000000000000000 | ....
[+]  03 | 00000000 | 00000000000000000000000000000000 | ....
[+]  04 | 00000000 | 00000000000000000000000000000000 | ....
[+]  05 | 00000000 | 00000000000000000000000000000000 | ....
[+]  06 | 00000000 | 00000000000000000000000000000000 | ....
[+]  07 | 00000000 | 00000000000000000000000000000000 | ....
[+] Reading Page 1:
[+] blk | hex data | binary                           | ascii
[+] ----+----------+----------------------------------+-------
[+]  00 | 00088048 | 00000000000010001000000001001000 | ...H
[+]  01 | E03900D0 | 11100000001110010000000011010000 | .9..
[+]  02 | C60337D7 | 11000110000000110011011111010111 | ..7.
[+]  03 | 00A00003 | 00000000101000000000000000000011 | ....
</code></pre><p>Note that it&rsquo;s possible to operate on single blocks too, but for the purpose of this article, it&rsquo;s easier to dump the whole memory instead.</p>
<p>We see that the card doesn&rsquo;t contain user data. If it did, wiping the card with the <code>lf t55xx wipe</code> command would be suggested.
We can now try and emulate tags on it!
To do that we only need to have the ID of the tags we want to emulate. We already saw how that&rsquo;s done.</p>
<p>We can now go ahead and clone the tags, let&rsquo;s try the em410x first:</p>
<pre><code>[usb] pm3 --&gt; lf em 410x clone --id 1122334455
[+] Preparing to clone EM4102 to T55x7 tag with ID 1122334455 (RF/64)
[#] Clock rate: 64
[#] Tag T55x7 written with 0xff8c65298c94a940
</code></pre><p>Once the command is issued, we can read the device and verify that it emulates an em410x tag:</p>
<pre><code>[usb] pm3 --&gt; lf em 410x reader
[+] EM 410x ID 1122334455
</code></pre><p>Of course it&rsquo;s still a t55xx tag (and the <code>detect</code> command will tell you that) but it behaves exactly like and em410x.</p>
<p>Now we can try with the HID Prox.</p>
<pre><code>[usb] pm3 --&gt; lf hid clone --r 000000000000002006ec0c86
[=] Preparing to clone HID tag using raw 000000000000002006ec0c86
[=] Done
</code></pre><p>And of course reading it reveals that we successfully cloned the tag:</p>
<pre><code>usb] pm3 --&gt; lf hid reader
[+] [H10301] - HID H10301 26-bit;  FC: 118  CN: 1603    parity: valid
[=] raw: 000000000000002006ec0c86
</code></pre><p>We now have two key fob tags copied on t55xx cards!</p>
<p><img src="/images/rfid/cloned.jpg" alt=""></p>
<p>In this demo only HID Prox and em410x tags are examined, but it&rsquo;s possible to clone and work with many more of these tags.</p>
<p>Since it&rsquo;s possible to emulate cards knowing the ID, we can clone some RFID LF cards &ldquo;by sight&rdquo; simply reading the ID printed to the device body.
This completely removes the limit of having to read the card with a specialized tool.
Some of these printed ID are &ldquo;encoded&rdquo; (or shifted by some value). This allows organizations to &ldquo;decode&rdquo; it, but prevents attackers from obtaining the ID by sight.</p>
<p>At this point you might be wondering if it&rsquo;s THAT easy to clone a tag in the real world, the answer is no. That&rsquo;s for a simple reason, the tag is passive and if we use the standard antennas provided with whichever device, the reading range is limited to a few centimeters.</p>
<p>Luckily, it&rsquo;s possible to weaponize a bigger antenna! If we use a bigger and more powerful antenna, it&rsquo;s possible to clone a LF tag from a usable distance. Of course the antenna will need to be powered by a big battery pack and carried in some kind of backpack or messenger bag, but that&rsquo;s the price to pay.</p>
<p>More here: <a href="https://www.youtube.com/watch?v=wYmVtNQPlF4">https://www.youtube.com/watch?v=wYmVtNQPlF4</a><br>
(NOTE: many other implementations exist!)</p>
<h3 id="defeating-password-protection">Defeating password protection</h3>
<p>When examining the t55xx tag, you may have noticed a parameter &ldquo;Password set&rdquo;. That&rsquo;s because
this tag can be password protected!</p>
<pre><code>[usb] pm3 --&gt; lf t55xx protect -n 00001234
[=] Checking current configuration
[+] Wrote new password
[+] Validated new password
[+] Wrote modified configuration block
[!] ⚠️  Safety check: Could not detect if PWD bit is set in config block. Exits.
[?] Consider using the override parameter to force read.
[=] Block0 write detected, running `detect` to see if validation is possible
[=]  Chip type......... T55x7
[=]  Modulation........ ASK
[=]  Bit rate.......... 2 - RF/32
[=]  Inverted.......... No
[=]  Offset............ 33
[=]  Seq. terminator... Yes
[=]  Block0............ 000880F0 (auto detect)
[=]  Downlink mode..... default/fixed bit length
[=]  Password set...... Yes
[=]  Password.......... 00001234

[+] New configuration block 000880F0 password 00001234
[+] Success, tag is locked
</code></pre><p>At this point we can&rsquo;t operate on this tag without knowing the password, for instance
the <code>detect</code> command won&rsquo;t work as expected:</p>
<pre><code>[usb] pm3 --&gt; lf t55xx detect 
[!] ⚠️  Could not detect modulation automatically. Try setting it manually with 'lf t55xx config'
</code></pre><p>But it does if the correct password is specified:</p>
<pre><code>[usb] pm3 --&gt; lf t55xx detect -p 00001234
[=]  Chip type......... T55x7
[=]  Modulation........ ASK
[=]  Bit rate.......... 2 - RF/32
[=]  Inverted.......... No
[=]  Offset............ 33
[=]  Seq. terminator... Yes
[=]  Block0............ 000880F0 (auto detect)
[=]  Downlink mode..... default/fixed bit length
[=]  Password set...... Yes
[=]  Password.......... 00001234
</code></pre><p>Can we circumvent this? The simple answer is no.
The device is completely locked and without the password it&rsquo;s impossible to do anything.</p>
<p>Luckily the proxmark allows bruteforce attacks.</p>
<p>While this type of attack works, it&rsquo;s a really slow and instable method. This means it&rsquo;s hard to try all the possible passwords before the connection drops. It may seem that the password protection is effective and that&rsquo;s true if you don&rsquo;t have the right tools. On the other hand, with quality reading devices and unlimited access to the target tag, success is granted.</p>
<p>Here&rsquo;s a demo on the tag we just password protected:</p>
<pre><code>[usb] pm3 --&gt; lf t55xx bruteforce -s 00000000 -e FFFFFFFF
[=] press 'enter' to cancel the command
[=] Search password range [00000000 -&gt; FFFFFFFF]
.[=] Trying password 00000000
.[=] Trying password 00000001
.[=] Trying password 00000002
.[=] Trying password 00000003
.[=] Trying password 00000004
.[=] Trying password 00000005
.[=] Trying password 00000006
.[=] Trying password 00000007
.[=] Trying password 00000008
.[=] Trying password 00000009
.[=] Trying password 0000000A
.[=] Trying password 0000000B
.[=] Trying password 0000000C
.[=] Trying password 0000000D

[...]

.[=] Trying password 0000122D
.[=] Trying password 0000122E
.[=] Trying password 0000122F
.[=] Trying password 00001230
.[=] Trying password 00001231
.[=] Trying password 00001232
.[=] Trying password 00001233
.[=] Trying password 00001234
[=]  Chip type......... T55x7
[=]  Modulation........ ASK
[=]  Bit rate.......... 2 - RF/32
[=]  Inverted.......... No
[=]  Offset............ 33
[=]  Seq. terminator... Yes
[=]  Block0............ 000880F0 (auto detect)
[=]  Downlink mode..... default/fixed bit length
[=]  Password set...... Yes
[=]  Password.......... 00001234

[+] Found valid password: [ 00001234 ]
Downlink Mode used : default/fixed bit length

[+] time in bruteforce 1215 seconds
</code></pre><p>As you can see, it took ~20 minutes to crack a 4 hex digit password. It may seem to be a reasonable time but we must consider that the password can be double the length and that having access to the card for long periods of time is not always an option.</p>
<h3 id="attacks-on-rfid-readers">Attacks on RFID readers</h3>
<p>Finally, we can talk about attacks on the readers. There are two main attacks:</p>
<ul>
<li>Tag simulation</li>
<li>Data exfiltration</li>
</ul>
<p>We saw that we can simulate a tag using the proxmark, but what if the ID we have read and simulated doesn&rsquo;t have enough permission to grant us access somewhere?
In this scenario, it&rsquo;s possible to use the read value as an upper limit to the ID space to research, and simulate every ID lower than that value hoping to find an ID with higher privileges. This attack is based on the assumption that lower IDs may have higher privileges because such privileges are associated with users registered earlier into the system, hence the lower ID value.
As for the bruteforce attack, this process may take a while, so it&rsquo;s not always a usable technique.</p>
<p>A sneakier way to get valid IDs is to install a device such as the <a href="https://redteamtools.com/espkey">ESPKey</a> inside the reader.
This approach allows the interception of data directly from the wires and can harvest valid IDs.
Of course, this requires a physical access to the reader.</p>
<p>Using the proxmark is also possible to sniff data from a tag to a reader.<br>
Given the antenna range, this is not a widely used technique and personally I haven&rsquo;t tried it yet.</p>
<h3 id="conclusions">Conclusions</h3>
<p>This article shows how, with the right hardware, it is possible to clone RFID tags with relatively low skills.</p>
<p>What&rsquo;s scary is how easy it is to &ldquo;steal&rdquo; valuable credentials. In an access control context, a stolen ID constitutes a danger for a business because of the implications of a possible unauthorized entry into a critical infrastructure.</p>
<p>Possible mitigations include using a stronger authentication mechanism and trainings on RFID security and how to keep access tokens safe. Simple precautions like using an RFID shield (test those! some doesn&rsquo;t work!) and avoiding to keep a tag in sight can often be a huge improvement in access token security.</p>
<p>A secure reader is also crucial. Some readers offer tamper detection mechanisms and actively try to detect and disable rewritable tags to avoid unauthorized entry.</p>
<p>RFID credentials cloning can be one of the strongest tools in the arsenal of a physical penetration tester.</p>
<hr>
<p>This article was reviewed by an external source, big thanks to them!</p>
]]></content></item><item><title>Dev Chronicles: Creating an HTTP attack client</title><link>https://lessonsec.com/posts/dev-chronicles-creating-an-http-attack-client/</link><pubDate>Thu, 01 Apr 2021 23:23:00 +0200</pubDate><guid>https://lessonsec.com/posts/dev-chronicles-creating-an-http-attack-client/</guid><description>Intrudo is a tool for automating customized attacks against web applications loosely shaped after burp intruder.
Check it out: https://github.com/0xless/Intrudo
A little of background While working on CTFs I would usually write a bunch of lines of python to automate attacks, it worked fine, but I felt like I needed to improve my workflow. So I decided to learn new approaches and strengthen my use of commercial offensive tools.
I have used burp suite in the past, but I have not taken the time to explore it thoroughly, so I figured the best way to do that would be the labs that PortSwigger created for this reason.</description><content type="html"><![CDATA[<p>Intrudo is a tool for automating customized attacks against web applications loosely shaped after <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder">burp intruder</a>.</p>
<p><img src="/images/intrudo/logo.png#center" alt="intrudo logo"></p>
<p>Check it out: <a href="https://github.com/0xless/Intrudo">https://github.com/0xless/Intrudo</a></p>
<h3 id="a-little-of-background">A little of background</h3>
<p>While working on CTFs I would usually write a bunch of lines of python to automate attacks, it worked fine, but I felt like I needed to improve my workflow. So I decided to learn new approaches and strengthen my use of commercial offensive tools.<br>
I have used burp suite in the past, but I have not taken the time to explore it thoroughly, so I figured the best way to do that would be the labs that <a href="https://portswigger.net/web-security">PortSwigger created for this reason</a>.</p>
<p>The idea of developing this tool came to me when working on SQL injection challenges. The labs and the learning material were great, but the throttling on the requests in burp intruder (community version only) was making it difficult to complete these challenges.  Due to the throttling, completing a challenge would take several hours since for every request sent, you have to wait more and more.</p>
<p>Every challenge was focused on retrieving an administrative password, in some of these challenges a request needed to be sent for every possible letter and digit for each character of the password.  Now these challenges could be solved in two ways. You could either send requests to discover one character at time or try to automate it using the &ldquo;cluster bomb&rdquo; attack. In the first scenario, you&rsquo;d have to adjust the parameters and manually launch the attack every 30 minutes or so. In the second scenario, you could automate the whole thing, if the challenge password didn&rsquo;t change mid-attack because the client took so long to send the requests.</p>
<p>One would assume these challenges were developed <em>specifically</em> to make it harder to solve for those who didn&rsquo;t have a paid version of the software. I&rsquo;m not implying they have a malicious intent, but they could have made it easier for <em>everybody</em> to solve the challenges and learn from the awesome materials they share.</p>
<p>After my experience with PortSwigger&rsquo;s labs, I decided to develop Intrudo; a fast, throttling free alternative to burp intruder.</p>
<h3 id="the-initial-approach">The initial approach</h3>
<p>My first idea was to use multithreading so I started surfing the web for ideas and found <a href="https://docs.aiohttp.org/en/stable/">aiohttp</a>, and asynchronous HTTP Client/Server based on <a href="https://docs.aiohttp.org/en/stable/glossary.html#term-asyncio">asyncio</a>. It wasn&rsquo;t multithreading but it seemed perfect for this project.</p>
<p>Unfortunately, I was not lucky with the choice of developing around <code>aiohttp</code> as the client was strict on what requests can be sent and how they are sent.</p>
<p>I learned this the hard way, of course. I spent a few days developing with <code>aiohttp</code> and all I could achieve was an incredibly fast fuzzer that would only work on URL parameters. Big let down.</p>
<p>At this point I could try two things:</p>
<ul>
<li>see if I could find some libraries I could fork</li>
<li>implement my own client consisting of bare bones sockets and some good ol' <code>asyncio</code> magic</li>
</ul>
<h3 id="the-wrong-way">The wrong way</h3>
<p>So I decided to try and modify some libraries first. It turns out every library that implements an HTTP client wants to ensure it is compliant and do so by thoroughly reviewing the data an user would want to send.
Usually these libraries make you specify method, URL, headers and body of the request separately.</p>
<p>While this approach with HTTP complaint requests works well for standard clients and preventing errors, it is not flexible enough for this type of project.  This makes it incredibly hard to implement complex attack logic, work with headers and cookies and send non-HTTP compliant malformed data.</p>
<p>After looking around, studying the HTTP protocol specifications and coding for a few hours, I was able to read some requests (non-chunked transfer encoding ones) and manage content compression!</p>
<p>Well, to be completely honest, I borrowed and modified some code from <a href="https://github.com/urllib3/urllib3/blob/main/src/urllib3/">urllib3</a> to handle the decompression.</p>
<p>I did this for two reasons:</p>
<ul>
<li>the code is clean, simple and well tested</li>
<li>someone has already considered aspects of the HTTP standard I didn&rsquo;t even know existed</li>
</ul>
<p>Since <code>urllib3</code> worked so well I decided to try and use as much code as I could.<br>
One tweak here and one tweak there and I got myself into completely modifying <code>urllib3</code>&hellip; Bad idea!<br>
<code>urllib3</code> offers great client functionalities, but it&rsquo;s too high level and wouldn&rsquo;t let me work with <code>asyncio</code> streams to read data.</p>
<p><code>urllib3</code> requests are made by <code>http.client</code>, a standard python library. So guess, what I tried next? You guessed correctly, I attempted to hack <code>http.client</code> to work with <code>asyncio</code>.
I knew from the beginning that it wasn&rsquo;t a smart idea, and it turns out I was right: modifying the <code>http</code> library to suit my needs is an hard task. <code>http.client</code> would only read file-like objects and there was no way I could make it to use <code>asyncio</code> streams (without rewriting a huge portion of the code, of course).</p>
<p>If you can&rsquo;t beat &lsquo;em, join &lsquo;em, right? So I decided to &ldquo;transform&rdquo; <code>asyncio</code> streams into files with the hope <code>urllib3</code> will come to like them.  At this point you may think: &ldquo;<em>less, if you read the whole content of a socket, the client would not be asynchronous anymore!</em>&rdquo;, and my answer to that would be <del>&quot;<em>mind your own business</em>&quot;</del> &ldquo;<em>we can manage sockets in some kind of spooled way!</em>&rdquo;. But of course that didn&rsquo;t pan out.</p>
<p>After a few hours of unsuccessful attempts, I decided to take a step back and code the whole client from scratch.</p>
<h3 id="the-right-way">The right way?</h3>
<p>I quickly realized it wasn&rsquo;t as easy as I expected it to be, but I did find some <a href="https://www.jmarshall.com/easy/http/">well written documents</a> that helped me better understand what I was I was looking for. So, the custom HTTP client adventure begins!</p>
<p>I was able to put together some code I had already written and the decompression module from <code>urllib3</code>. That resulted in an HTTP 1.0 semi-compliant client (it would have been nice if HTTP 1.0 was used anytime in history, but sadly it has not).
I want to make it HTTP 1.1 compliant to the extent that I need the client to be compliant, so the only thing missing would be to manage
<code>chunked transfer encoding</code>.</p>
<p>After avoiding this for a whole week, I realized it was easier than I expected. If I hadn&rsquo;t wasted so much time trying to poke at the libraries, I probably would have had a nice piece of client already.
But you can&rsquo;t cry over spilled milk, so let&rsquo;s get back to work! After 1 hour of coding and 1 hour of debugging, I was able to achieve HTTP 1.1 compliance!</p>
<p>And just like that &ldquo;cliente&rdquo; was born: a fully asynchronous, unrestricted, HTTP attack client. Simple yet effective.</p>
<h3 id="the-right-way-1">The right way!</h3>
<p>Everything seemed to work smoothly after the custom client was complete.
I implemented the payload position logics just like in burp intruder (pitchfork, sniper, cluster bomb and battering ram), it was not easy to work with two delimiters: I had to play around a little bit with <code>regex</code> and had to work with payload position offsets given by the substitution of a text with a payload. To this day I&rsquo;m sure there must be a better solution.</p>
<p>After that I implemented a few simple callback mechanisms to manage, analyze and store incoming responses which match user specified criteria.</p>
<p>It&rsquo;s only a draft, but the very first version of Intrudo was complete!</p>
<p>Here&rsquo;s a little demo of the speed Intrudo can offer at the moment:</p>
<p><img src="/images/intrudo/demo.gif#center" alt="intrudo demo"></p>
<h3 id="what-i-learned">What I learned</h3>
<p>Of course the main takeaway is a deeper understanding of the HTTP protocol, especially when it comes to encodings and compression methods, since I  had to work with these directly.</p>
<p>Working with raw HTTP requests was also the main challenge, ensuring that an user specified request is acceptable by the server was an hard task. Since there are no debug messages this process was based on a &ldquo;try and fail&rdquo; method and I had to read multiple rfc documents on the standard but I could complete this task, at least for the majority of servers I&rsquo;ve experimented with.</p>
<p>Another interesting thing I got from this project is a grasp of asynchronous programming. I had studied it in theory but learning a framework to actually write asynchronous programs is different thing.  <code>asyncio</code> is a powerful tool I will be using in other projects.</p>
<p>Finally I had to mess around with <code>regex</code> and learned about greedy <code>regex</code>. Handling the placeholder delimiters in the requests wasn&rsquo;t straightforward and for the sake of performance (to avoid recomputing placeholder positions for each payload inserted) I had to develop a module that would insert the payload in the desired position considering the offsets from previously inserted payloads.</p>
<h3 id="to-be-continued">To be continued</h3>
<p>There are a few things that need to be done:</p>
<ul>
<li>The callbacks are not as complete as burp intruder ones.</li>
<li>There is no payload generator (but that&rsquo;s because Intrudo is to be used as a framework, not with a GUI).</li>
<li>Some servers will always respond with &ldquo;bad request&rdquo; (can&rsquo;t figure out why).</li>
<li>Some serious testing is yet to be done.</li>
<li>The timeout on requests is to be calculated with an adaptive function to optimize the throughput.</li>
</ul>
]]></content></item><item><title>The art of lock picking: Insights from picking locks</title><link>https://lessonsec.com/posts/the-art-of-lock-picking-insights-from-picking-locks/</link><pubDate>Mon, 01 Mar 2021 18:06:36 +0100</pubDate><guid>https://lessonsec.com/posts/the-art-of-lock-picking-insights-from-picking-locks/</guid><description>Lock picking is the practice of unlocking a lock by manipulating the components of the lock device without the original key. - Wikipedia
Locks are an universal item used to secure everything from homes and offices to critical infrastructures. They often represent the first line of security an attacker will have to face while trying to reach a target.
Although lock picking is often associated with criminal intent, it can also be an essential skill within penetration testers.</description><content type="html"><![CDATA[<blockquote>
<p><strong>Lock picking</strong> is the practice of unlocking a lock by manipulating the components of the lock device without the original key. - <a href="https://en.wikipedia.org/wiki/Lock_picking">Wikipedia</a></p>
</blockquote>
<p><img src="/images/lockpicking/lockpicking.jpg#center" alt="lock picks"></p>
<p>Locks are an universal item used to secure everything from homes and offices to critical infrastructures. They often represent the first line of security an attacker will have to face while trying to reach a target.</p>
<p>Although lock picking is often associated with criminal intent, it can also be an essential skill within penetration testers. Like any other red team technique, lock picking translates to a defensive skill as it assists with finding and patching vulnerabilities. Since locks play such an important role in modern day security, it is important as a security professional to understand the lock picking process and what comes with it.</p>
<h3 id="lock-picking-is-hacking">Lock picking is hacking</h3>
<p>Picking locks is not so different from hacking a computer: you are faced with a challenge and need to defeat security measures to get to the target. In both cases to succeed, you will need a strong background of study and practice.
The passion for discovering vulnerabilities and the curiosity to learn about a technology is the reason why lock picking is so popular amongst security professionals.</p>
<blockquote>
<p>It’s another version of hacking. Hacking is all about using a system against itself, or bypassing a system by thinking outside of the box. Lockpicking is almost like a magic trick, a puzzle of the same sort. You can’t bypass it without using the lock’s systems exactly how they were meant to be used or by using it in a manner the creators never expected it to be used. - <a href="https://twitter.com/HydeNS33k">Jek Hyde</a></p>
</blockquote>
<p>While the technical knowledge received from practicing lock picking is useful, picking locks may be one of the least effective ways to enter inside a protected perimeters. This can be true for many reasons:</p>
<ul>
<li>Some locks can be <em>really hard</em> to pick open</li>
<li>Picking locks can take a <em>really long</em> time</li>
<li>Bypassing doors and locks is usually a more effective approach</li>
<li>Social engineering oftentimes works better</li>
</ul>
<p>While <a href="https://www.youtube.com/watch?v=LRXGIdg7eNE">lock picking has it&rsquo;s applications</a>, it remains an impractical technique for numerous situations. This then leads to the question: <em>why practice lock picking</em>?
The reason is simple. Lock picking and cybersecurity are similar in nature where the skills can become transferable.</p>
<p>Some skills that can be picked up from picking locks which apply to cybersecurity are:</p>
<ul>
<li><strong>Outside of the box thinking</strong><br>
If a lock doesn&rsquo;t want to open, how can you make it do so? The more complex the lock, the more complex the solution can be. Though with the right intuition, you are in.</li>
<li><strong>Think like the enemy</strong><br>
The only way to secure something is knowing exactly how to defeat its security measures.
Picking locks brings a new dimension to &ldquo;<em>thinking like the enemy</em>&rdquo;, since implications are projected into the physical world.</li>
<li><strong>Ethics</strong><br>
A strong ethic is needed in both cyber and physical security. Considering different approaches with the same concept can add to an individual&rsquo;s experience.</li>
</ul>
<p>To conclude, lock picking is an important skill that gives a firsthand experience into the world of security. Working on a physical level can assist with understanding the security risks faced every day. <em>It is not possible to improve security without the understanding of how an attacker can defeat security measures that are in place</em>.</p>
]]></content></item></channel></rss>